parameters:
- name: buildAgent
  type: string

- name: deploymentAzureSubscriptionName
  type: string

- name: managementAzureSubscriptionName
  type: string

- name: variableGroupName
  type: string

jobs:
    - job: 'Deploy_Infrastructure'
      pool: 
        vmImage: ${{ parameters.buildAgent }}
      variables:
        - group: ${{ parameters.variableGroupName }}

      steps:
        - task: AzurePowerShell@5
          name: 'Copy_PowerShell_Scripts_To_Deployment_Storage_Account'
          displayName: 'Copy PowerShell Scripts From Repo To Deployment Storage Account'
          inputs:
            azureSubscription: ${{ parameters.managementAzureSubscriptionName }}
            errorActionPreference: 'Stop'
            scriptType: 'inlineScript'
            inline: |
              Set-Location "$(Build.SourcesDirectory)\powershell-scripts"
              $scriptsToUpload = @( `
              ".\configureDemoServer.ps1" `
              )
              $storageContainer = 'demo-resources'
              $storageContext = (New-AzStorageContext -StorageAccountName '$(deploymentRepositoryStorageAccount)' -UseConnectedAccount)

              foreach($script in $scriptsToUpload)
              {
                $blobName = ('sqlmigrationdemo\scripts\' + $script.Replace(".\",""))
                Set-AzStorageBlobContent -Container $storageContainer -File $script -Blob $blobName -Properties @{"ContentType" = "text/plain"} -Context $storageContext -Force
              }
            azurePowerShellVersion: LatestVersion

        - task: AzurePowerShell@5
          name: 'Get_Required_Keyvault_Secrets'
          displayName: 'Get Required Secrets from Azure KeyVault'
          inputs:
            azureSubscription: ${{ parameters.managementAzureSubscriptionName }}
            errorActionPreference: 'Stop'
            scriptType: 'inlineScript'
            inline: |
              $azureActiveDirectoryTenantId = (Get-AzKeyVaultSecret -VaultName '$(managementAzureSubscriptionKeyVault)' -Name '$(azureActiveDirectoryTenantId)' -AsPlainText)
              $azureSQLServerAADAdmin = (Get-AzKeyVaultSecret -VaultName '$(managementAzureSubscriptionKeyVault)' -Name '$(azureSQLServerAADAdmin)' -AsPlainText)
              $azureSQLServerAADAdminSID = (Get-AzKeyVaultSecret -VaultName '$(managementAzureSubscriptionKeyVault)' -Name '$(azureSQLServerAADAdminSID)' -AsPlainText)
              $azureSQLServerSQLAdminPassword = (Get-AzKeyVaultSecret -VaultName '$(managementAzureSubscriptionKeyVault)' -Name '$(azureSQLServerSQLAdminPassword)' -AsPlainText)
              $azureSQLServerSQLAdminUsername = (Get-AzKeyVaultSecret -VaultName '$(managementAzureSubscriptionKeyVault)' -Name '$(azureSQLServerSQLAdminUsername)' -AsPlainText)
              $sqlVMPassword = (Get-AzKeyVaultSecret -VaultName '$(managementAzureSubscriptionKeyVault)' -Name '$(sqlVMPassword)' -AsPlainText)
              $sqlVMSQLAuthBreakglassPassword = (Get-AzKeyVaultSecret -VaultName '$(managementAzureSubscriptionKeyVault)' -Name '$(sqlVMSQLAuthPassword)' -AsPlainText)
              $sqlVMSQLAuthBreakglassUsername = (Get-AzKeyVaultSecret -VaultName '$(managementAzureSubscriptionKeyVault)' -Name '$(sqlVMSQLAuthUsername)' -AsPlainText)
              $sqlVMSQLSAPassword = (Get-AzKeyVaultSecret -VaultName '$(managementAzureSubscriptionKeyVault)' -Name '$(sqlVMSQLSAPassword)' -AsPlainText)
              $sqlVMUsername = (Get-AzKeyVaultSecret -VaultName '$(managementAzureSubscriptionKeyVault)' -Name '$(sqlVMUsername)' -AsPlainText)
              $sqlVMUsernameFQ = (Get-AzKeyVaultSecret -VaultName '$(managementAzureSubscriptionKeyVault)' -Name '$(sqlVMUsernameFQ)' -AsPlainText)
              
              Write-Host "##vso[task.setvariable variable=azureActiveDirectoryTenantId;issecret=true;isoutput=true]$azureActiveDirectoryTenantId"
              Write-Host "##vso[task.setvariable variable=azureSQLServerAADAdmin;issecret=true;isoutput=true]$azureSQLServerAADAdmin"
              Write-Host "##vso[task.setvariable variable=azureSQLServerAADAdminSID;issecret=true;isoutput=true]$azureSQLServerAADAdminSID"
              Write-Host "##vso[task.setvariable variable=azureSQLServerSQLAdminPassword;issecret=true;isoutput=true]$azureSQLServerSQLAdminPassword"
              Write-Host "##vso[task.setvariable variable=azureSQLServerSQLAdminUsername;issecret=true;isoutput=true]$azureSQLServerSQLAdminUsername"
              Write-Host "##vso[task.setvariable variable=sqlVMPassword;issecret=true;isoutput=true]$sqlVMPassword"
              Write-Host "##vso[task.setvariable variable=sqlVMSQLAuthBreakglassPassword;issecret=true;isoutput=true]$sqlVMSQLAuthBreakglassPassword"
              Write-Host "##vso[task.setvariable variable=sqlVMSQLAuthBreakglassUsername;issecret=true;isoutput=true]$sqlVMSQLAuthBreakglassUsername"
              Write-Host "##vso[task.setvariable variable=sqlVMSQLSAPassword;issecret=true;isoutput=true]$sqlVMSQLSAPassword"
              Write-Host "##vso[task.setvariable variable=sqlVMUsername;issecret=true;isoutput=true]$sqlVMUsername"
              Write-Host "##vso[task.setvariable variable=sqlVMUsernameFQ;issecret=true;isoutput=true]$sqlVMUsernameFQ"
            azurePowerShellVersion: LatestVersion
        
        - task: AzureCLI@2
          name: 'Deploy_Resource_Groups'
          displayName: 'Deploy Resource Groups'
          inputs:
            azureSubscription: ${{ parameters.deploymentAzureSubscriptionName }}
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              az deployment sub create `
              --location $(resourceLocation) `
              --template-file './bicep-Templates/deployResourceGroup.bicep' `
              --parameters `
              costCenter="$(costCenter)" `
              environmentType=$(environmentType) `
              resourceGroupName=$(resourceGroupName) `
              resourceLocation=$(resourceLocation)

        - task: AzureCLI@2
          name: 'Deploy_Resources'
          displayName: 'Deploy Resources'
          inputs:
            azureSubscription: ${{ parameters.deploymentAzureSubscriptionName }}
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              az deployment group create `
              --resource-group $(resourceGroupName) `
              --template-file './bicep-Templates/deployResources.bicep' `
              --parameters `
              azureActiveDirectorySQLServerAdministrator=$(Get_Required_Keyvault_Secrets.azureSQLServerAADAdmin) `
              azureActiveDirectorySQLServerAdministratorSID=$(Get_Required_Keyvault_Secrets.azureSQLServerAADAdminSID) `
              azureActiveDirectoryTenantId=$(Get_Required_Keyvault_Secrets.azureActiveDirectoryTenantId) `
              costCenter="$(costCenter)" `
              environmentType=$(environmentType) `
              resourceLocation=$(resourceLocation) `
              resourceLocationShort=$(resourceLocationShort) `
              sqlServerAdministratorPassword="$(Get_Required_Keyvault_Secrets.azureSQLServerSQLAdminPassword)" `
              sqlServerAdministratorUsername="$(Get_Required_Keyvault_Secrets.azureSQLServerSQLAdminUsername)" `
              sqlVMName=$(sqlVMName) `
              virtualMachineAdminPassword="$(Get_Required_Keyvault_Secrets.sqlVMPassword)" `
              virtualMachineAdminUsername="$(Get_Required_Keyvault_Secrets.sqlVMUsername)"

        - task: AzurePowerShell@5
          name: 'Run_Preparation_Scripts'
          displayName: 'Run Preparation Scripts'
          inputs:
            azureSubscription: ${{ parameters.deploymentAzureSubscriptionName }}
            errorActionPreference: 'Stop'
            scriptType: 'inlineScript'
            inline: |
              $vmPreparationScript = {
              #Create Computer Configuration Directories
              New-Item -Path 'C:\ComputerSetup' -ItemType Directory
              New-Item -Path 'C:\ComputerSetup\Install' -ItemType Directory
              New-Item -Path 'C:\ComputerSetup\Logs' -ItemType Directory
              New-Item -Path 'C:\ComputerSetup\Scripts' -ItemType Directory
              
              Set-Location 'C:\ComputerSetup\Install'

              $scriptLogFileName = 'vmPreparation-Log.txt'
              $scriptLogPath = "C:\ComputerSetup\Logs\$scriptLogFileName"

              #Create Script Log File
              try
              {
                  $currentTimestamp = Get-Date
                  New-Item -Path $computerConfigurationLogDirectory -Name $scriptLogFileName -ItemType File -Value "Script log file created at $currentTimestamp." -Force
              }
              catch
              {
                  Write-Host "Unable to create log file $scriptLogPath."
              }

              #Download IISCrypto
              try
              {
                Invoke-WebRequest -Uri "https://www.nartac.com/Downloads/IISCrypto/IISCryptoCli.exe" -Outfile "C:\ComputerSetup\Install\IISCryptoCli.exe"
                $currentTimestamp = Get-Date
                $outputText = "IISCrypto has been successfully downloaded to $env:computername at $currentTimestamp."
                Write-Host $outputText
                Add-Content -Path $scriptLogPath "`n$outputText"
              }
              catch
              {
                $errorMessage = $_.Exception.Message
                $currentTimestamp = Get-Date
                $outputText = "An error occured when downloading IISCrypto to $env:computername at $currentTimestamp with the following error '$errorMessage'."
                Write-Host $outputText
                Add-Content -Path $scriptLogPath "`n$outputText"
              }

              #Install IISCrypto
              try
              {
                .\IISCryptoCli.exe /backup 'C:\ComputerSetup\Install\OriginalCryptoConfig.reg' /template best
                $currentTimestamp = Get-Date
                $outputText = "IISCrypto has been successfully configured on $env:computername at $currentTimestamp."
                Write-Host $outputText
                Add-Content -Path $scriptLogPath "`n$outputText"
              }
              catch
              {
                $errorMessage = $_.Exception.Message
                $currentTimestamp = Get-Date
                $outputText = "An error occured when configuring IISCrypto on $env:computername at $currentTimestamp with the following error '$errorMessage'."
                Write-Host $outputText
                Add-Content -Path $scriptLogPath "`n$outputText"
              }
              
              #Download dotnet Framework 4.8
              try
              {
                Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2088631" -OutFile "C:\ComputerSetup\Install\ndp48-x86-x64-allos-enu.exe"
                $currentTimestamp = Get-Date
                $outputText = "dotnet Framework 4.8 has been successfully downloaded to $env:computername at $currentTimestamp."
                Write-Host $outputText
                Add-Content -Path $scriptLogPath "`n$outputText"
              }
              catch
              {
                $errorMessage = $_.Exception.Message
                $currentTimestamp = Get-Date
                $outputText = "An error occured when downloading dotnet Framework 4.8 to $env:computername at $currentTimestamp with the following error '$errorMessage'."
                Write-Host $outputText
                Add-Content -Path $scriptLogPath "`n$outputText"
              }

              #Install dotnet Framework 4.8
              try
              {
                .\ndp48-x86-x64-allos-enu.exe /install /quiet /norestart
                Start-Sleep -Seconds 600
                $currentTimestamp = Get-Date
                $outputText = "dotnet Framework 4.8 has been successfully installed on $env:computername at $currentTimestamp."
                Write-Host $outputText
                Add-Content -Path $scriptLogPath "`n$outputText"
              }
              catch
              {
                $errorMessage = $_.Exception.Message
                $currentTimestamp = Get-Date
                $outputText = "An error occured when installing dotnet Framework 4.8 on $env:computername at $currentTimestamp with the following error '$errorMessage'."
                Write-Host $outputText
                Add-Content -Path $scriptLogPath "`n$outputText"
              }
              
              #Download Setup Script
              try
              {
                Invoke-WebRequest -Uri "https://$(deploymentRepositoryStorageAccount).blob.core.windows.net/demo-resources/sqlmigrationdemo/scripts/configureDemoServer.ps1" -OutFile "C:\ComputerSetup\Scripts\configureDemoServer.ps1"
                $currentTimestamp = Get-Date
                $outputText = "The demo server configuration script has been successfully downloaded to $env:computername at $currentTimestamp."
                Write-Host $outputText
                Add-Content -Path $scriptLogPath "`n$outputText"
              }
              catch
              {
                $errorMessage = $_.Exception.Message
                $currentTimestamp = Get-Date
                $outputText = "An error occured when downloading the demo server configuration script to $env:computername at $currentTimestamp with the following error '$errorMessage'."
                Write-Host $outputText
                Add-Content -Path $scriptLogPath "`n$outputText" 
              }
             
              }

              $demoServerConfigurationScript = {
              Set-Location 'C:\ComputerSetup\Scripts'
              .\configureDemoServer.ps1 `
              -sqlServerSAAccountPassword "$(Get_Required_Keyvault_Secrets.sqlVMSQLSAPassword)" `
              -sqlServerSQLAuthBreakglassPassword "$(Get_Required_Keyvault_Secrets.sqlVMSQLAuthBreakglassPassword)" `
              -sqlServerSQLAuthBreakglassUsername "$(Get_Required_Keyvault_Secrets.sqlVMSQLAuthBreakglassUsername)" `
              -sqlServerSysAdminAccount "$(Get_Required_Keyvault_Secrets.sqlVMUsernameFQ)" `
              -storageAccountBlobPrefix "https://$(deploymentRepositoryStorageAccount).blob.core.windows.net/demo-resources/sqlmigrationdemo"
              }

              Invoke-AzVMRunCommand -ResourceGroupName '$(resourceGroupName)' -VMName $(sqlVMName) -CommandId 'RunPowerShellScript' -ScriptString $vmPreparationScript
              Restart-AzVM -ResourceGroupName '$(resourceGroupName)' -Name $(sqlVMName)
              Invoke-AzVMRunCommand -ResourceGroupName '$(resourceGroupName)' -VMName $(sqlVMName) -CommandId 'RunPowerShellScript' -ScriptString $demoServerConfigurationScript
            azurePowerShellVersion: LatestVersion